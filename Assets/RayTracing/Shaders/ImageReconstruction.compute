#include "GPUStructs.hlsl"
#include "colorConvert.hlsl"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
float2 rasterSize;
int framesNum;
float _Exposure;
StructuredBuffer<PathRadiance> pathRadiances;
RWTexture2D<float4>  spectrums;
RWTexture2D<half4> outputTexture;



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)rasterSize.x || id.y >= (uint)rasterSize.y)
        return;

    int threadId = id.x + id.y * rasterSize.x;
    float4 color;
    PathRadiance pathRadiance = pathRadiances[threadId];
    float3 radiance = LinearToGammaSpace(ACESToneMapping(pathRadiance.li.rgb, _Exposure));
    float3 spectrum = spectrums[id.xy];

    spectrum.rgb += radiance;
    spectrums[id.xy] = half4(spectrum, 1);
    color.rgb = spectrum / framesNum;
    color.a = 1;
    outputTexture[id.xy] = color;
}
