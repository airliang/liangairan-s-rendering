#include "sampler.hlsl"
#include "bvhaccel.hlsl"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RayTraversal



// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

//use the matrix to calculate the world space ray


RWTexture2D<half4> outputTexture;

[numthreads(8,8,1)]
void RayTraversal(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x >= rasterSize.x || id.y >= rasterSize.y)
        return;

    Ray ray = Rays[id.x + id.y * rasterSize.x];
    Interaction isect = (Interaction)0;
    if (IntersectBVHandTriangles(ray, isect))
    {
        int triIndex = asint(isect.primitive.x);
        //float3 color = (float)(triIndex / 3) / 50.0;
        float3 color = isect.normal.xyz * 0.5 + 0.5f;
        outputTexture[id.xy] = half4(color, 1);//abs(ray.direction);
    }
    else
        outputTexture[id.xy] = half4(1, 0, 0, 1);
}
