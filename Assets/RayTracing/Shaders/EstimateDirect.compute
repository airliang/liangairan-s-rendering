// Each #kernel tells which function to compile; you can have many kernels

#include "sampler.hlsl"
#include "materials.hlsl"
#include "bvhaccel.hlsl"
#include "distributions.hlsl"
#include "light.hlsl"

#pragma kernel CSMain


int    bounces;
float2 rasterSize;
int    queueSizeIndex;


StructuredBuffer<Interaction>  Intersections;
StructuredBuffer<ShadowRay>  ShadowRays;
RWStructuredBuffer<PathRadiance> pathRadiances;

RWStructuredBuffer<uint> _RayQueueSizeBuffer;
RWStructuredBuffer<uint> _RayQueue;
RWStructuredBuffer<Ray>   Rays;
//RWTexture2D<half4> outputTexture;



float3 EstimateDirect(Interaction isect, Material material, inout RNG rng, out float scatteringPdf, out float3 wi)
{
    //float3 Ld = shadowRay.radiance;
    float3 woLocal = isect.WorldToLocal(isect.wo);
    //float3 wi;
    //float scatteringPdf = 0;
    float3 wiLocal;
    float2 u = Get2D(rng);
    float3 f = SampleMaterialBRDF(material, isect, woLocal, wiLocal, scatteringPdf, rng);
    
    wi = isect.LocalToWorld(wiLocal);
    //f *= abs(dot(wi, isect.normal));

    return f;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x >= rasterSize.x || id.y >= rasterSize.y)
        return;

    uint threadId = id.x + id.y * rasterSize.x;
    uint queueSize = _RayQueueSizeBuffer[queueSizeIndex];
    if (threadId >= queueSize)
        return;
    uint workIndex = _RayQueue[threadId];
    RNG rng = GetRNG(threadId);

    ShadowRay shadowRay = ShadowRays[workIndex];
    Interaction isect = Intersections[workIndex];
    PathRadiance pathRadiance = pathRadiances[workIndex];
    Material material = materials[isect.materialID];
    //float2 u = Get2D(rng);//rs.Get2D(workIndex);
    float3 beta = 1; // = pathRadiance.beta;
    float scatteringPdf = 0;
    float3 wi;
    float3 f = EstimateDirect(isect, material, rng, scatteringPdf, wi);
    float3 Li = shadowRay.radiance;  
    Ray ray;
    if (scatteringPdf > 0)
    {
        beta = f * abs(dot(wi, isect.normal)) / scatteringPdf;
        int shadowLightIndex = asint(shadowRay.lightIndex);
        Light light = lights[shadowLightIndex];

        ray = SpawnRay(isect.p.xyz, wi, isect.normal, FLT_MAX);

        float lightPdf = AreaLightPdf(light, isect, wi, false);
        if (lightPdf > 0)
        {
            float3 li = 0;
            //caculate the mis weight

            Interaction lightISect = (Interaction)0;
            bool found = ClosestHit(ray, lightISect);
            if (found)
            {
                int meshInstanceIndex = lightISect.meshInstanceID;
                MeshInstance meshInstance = MeshInstances[meshInstanceIndex];

                if (meshInstance.GetLightIndex() == shadowLightIndex)
                    li = Light_Le(wi, light);
            }
            else if (light.type == EnvLightType)
            {
                li = Light_Le(wi, light);
            }
            
            float weight = PowerHeuristic(1, scatteringPdf, 1, lightPdf);
            Li += li * weight * beta;
        }
    }
    Li /= shadowRay.lightSourcePdf;
    pathRadiance.li += Li * pathRadiance.beta;

    if (scatteringPdf > 0)
    {
        bool breakPath = false;
        pathRadiance.beta *= beta;

        if (bounces > 3)
        {
            float q = max(0.05, 1 - MaxComponent(pathRadiance.beta));
            if (Get1D(rng) < q)
            {
                breakPath = true;
            }
            else
                pathRadiance.beta /= 1 - q;
        }

        if (!breakPath)
        {
            Rays[workIndex] = ray;
            uint index;
            InterlockedAdd(_RayQueueSizeBuffer[queueSizeIndex + 1], 1, index);
            _RayQueue[index] = workIndex;
        }
    }
    //outputTexture[id.xy] = half4(f, 1);
    pathRadiances[workIndex] = pathRadiance;
    WriteRNG(threadId, rng);
}
