// Each #kernel tells which function to compile; you can have many kernels

#include "sampler.hlsl"
#include "materials.hlsl"
#include "bvhaccel.hlsl"
#include "distributions.hlsl"
#include "light.hlsl"

#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols

//#pragma multi_compile __ _ENVMAP_ENABLE
//#pragma multi_compile _ _UNIFORM_SAMPLE_LIGHT

int    bounces;
float2 rasterSize;
int    curQueueSizeIndex;
int    nextQueueSizeIndex;
int    MIN_DEPTH;

RWStructuredBuffer<Interaction>  Intersections;
StructuredBuffer<ShadowRay>  ShadowRays;
RWStructuredBuffer<PathRadiance> pathRadiances;

RWStructuredBuffer<uint> _RayQueueSizeBuffer;
StructuredBuffer<uint> _RayQueue;
RWStructuredBuffer<uint> _NextRayQueue;
//RWStructuredBuffer<Ray>   Rays;
//RWTexture2D<half4> outputTexture;


/*
float3 EstimateDirect(Interaction isect, Material material, inout RNG rng, out float scatteringPdf, out float3 wi)
{
    //float3 Ld = shadowRay.radiance;
    float3 woLocal = isect.WorldToLocal(isect.wo);
    //float3 wi;
    //float scatteringPdf = 0;
    float3 wiLocal;
    float2 u = Get2D(rng);
    float3 f = SampleMaterialBRDF(material, isect, woLocal, wiLocal, scatteringPdf, rng);
    
    wi = isect.LocalToWorld(wiLocal);
    return f;
}
*/

float3 MIS_BSDF(Interaction isect, Material material, inout RNG rng, out PathVertex pathVertex)
{
    //return MIS_BSDF_OLD(isect, material, shadowRay, rng, scatteringPdf, beta, ray);
    float3 ld = float3(0, 0, 0);
    float3 woLocal = isect.WorldToLocal(isect.wo);
    pathVertex = (PathVertex)0;
    float3 wiLocal;
    //float2 u = Get2D(rng);
    
    //beta = 0;
    BSDFSample bsdfSample = SampleMaterialBRDF(material, isect, woLocal, rng);
    float scatteringPdf = bsdfSample.pdf;
    float3 wi = isect.LocalToWorld(bsdfSample.wi);

    float3 f = bsdfSample.reflectance * abs(dot(wi, isect.normal));

    if (!IsBlack(f) && scatteringPdf > 0)
    {
        //beta = f * abs(dot(wi, isect.normal)) / scatteringPdf;
        //int shadowLightIndex = asint(shadowRay.lightIndex);
        //Light light = lights[shadowLightIndex];
        Ray ray = SpawnRay(isect.p.xyz, wi, isect.normal, FLT_MAX);
        //Interaction lightISect = (Interaction)0;
        bool found = ClosestHit(ray, pathVertex.nextISect);
        //pathVertex.nextISect = lightISect;
        pathVertex.found = found ? 1 : 0;
        float3 li = 0;
        float lightPdf = 0;

        if (found)
        {
            int meshInstanceIndex = pathVertex.nextISect.meshInstanceID;
            MeshInstance meshInstance = MeshInstances[meshInstanceIndex];
            int hitLightIndex = meshInstance.GetLightIndex();
            if (hitLightIndex >= 0)
            {
                Light hitLight = lights[hitLightIndex];
                float lightSourcePmf = LightSourcePmf(hitLightIndex);
                lightPdf = AreaLightPdf(hitLight, pathVertex.nextISect) * lightSourcePmf;
                if (lightPdf > 0)
                {
                    li = Light_Le(wi, hitLight);
                }
            }
            //if (meshInstance.GetLightIndex() == shadowLightIndex)
            //{
            //    lightPdf = AreaLightPdf(light, lightISect) * shadowRay.lightSourcePdf;

            //    if (lightPdf > 0)
            //    {
            //        li = Light_Le(wi, light);
            //    }
            //}
            
        }
        else if (_EnvLightIndex >= 0)//(light.type == EnvLightType)
        {
            Light envLight = lights[_EnvLightIndex];
            li = Light_Le(wi, envLight);

            float lightSourcePmf = LightSourcePmf(_EnvLightIndex);
            lightPdf = EnvLightLiPdf(wi) * lightSourcePmf;
        }

        float weight = bsdfSample.IsSpecular() ? 1 : PowerHeuristic(1, scatteringPdf, 1, lightPdf);

        ld = f * li * weight / scatteringPdf;
        //ld = li * weight * beta;
    }

    pathVertex.wi = wi;
    pathVertex.bsdfVal = f;
    pathVertex.bsdfPdf = scatteringPdf;
    //beta = f / scatteringPdf;
    return ld;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x >= rasterSize.x || id.y >= rasterSize.y)
        return;

    uint threadId = id.x + id.y * rasterSize.x;
    uint queueSize = _RayQueueSizeBuffer[curQueueSizeIndex];
    if (threadId >= queueSize)
        return;
    uint pixelIndex = _RayQueue[threadId];
    //uint pixelIndex = threadId;
    RNG rng = GetRNG(pixelIndex);

    ShadowRay shadowRay = ShadowRays[pixelIndex];
    Interaction isect = Intersections[pixelIndex];
    PathRadiance pathRadiance = pathRadiances[pixelIndex];
    Material material = materials[isect.materialID];
    //float2 u = Get2D(rng);//rs.Get2D(workIndex);
    //float3 beta = 1; // = pathRadiance.beta;
    //float scatteringPdf = 0;
    //float3 wi;
    //float3 f = EstimateDirect(isect, material, rng, scatteringPdf, wi);
	//int shadowLightIndex = asint(shadowRay.lightIndex);
    //Light light = lights[shadowLightIndex];
    float3 Li = shadowRay.radiance;
    PathVertex pathVertex = (PathVertex)0;
    //float3 beta = 0;
    Li += MIS_BSDF(isect, material, rng, pathVertex);
    //Li /= shadowRay.lightSourcePdf;
    pathRadiance.li += Li * pathRadiance.beta;
    //scatteringPdf = pathVertex.bsdfPdf;
	
    if (pathVertex.bsdfPdf > 0 && !IsBlack(pathVertex.bsdfVal))
    {
        bool breakPath = false;
        float3 throughput = pathVertex.bsdfVal / pathVertex.bsdfPdf;
        pathRadiance.beta *= throughput;

        if (bounces > MIN_DEPTH)
        {
            float q = max(0.05, 1 - MaxComponent(pathRadiance.beta));
            if (Get1D(rng) < q)
            {
                breakPath = true;
            }
            else
                pathRadiance.beta /= 1 - q;
        }

        if (!breakPath)
        {
            //Rays[pixelIndex] = ray;
            Intersections[pixelIndex] = pathVertex.nextISect;
            uint index;
            InterlockedAdd(_RayQueueSizeBuffer[nextQueueSizeIndex], 1, index);
            _NextRayQueue[index] = pixelIndex;
        }
    }
    //outputTexture[id.xy] = half4(f, 1);
    pathRadiances[pixelIndex] = pathRadiance;
    WriteRNG(pixelIndex, rng);
}
