// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "sampler.hlsl"
#include "materials.hlsl"
#include "bvhaccel.hlsl"
#include "distributions.hlsl"

cbuffer cb
{
    int    bounces;
    //int    lightsNum;
    float2 rasterSize;
    int    queueSizeIndex;
};

StructuredBuffer<Interaction>  Intersections;
StructuredBuffer<ShadowRay>  ShadowRays;
StructuredBuffer<Light> lights;
StructuredBuffer<Material> materials;
RWStructuredBuffer<PathRadiance> pathRadiances;
//StructuredBuffer<int>    pathStates;
//x pdf y cdf
StructuredBuffer<float2> Distributions1D;
StructuredBuffer<uint> _RayQueueSizeBuffer;
StructuredBuffer<uint> _RayQueue;
//RWTexture2D<half4> outputTexture;

float AreaLightPdf(Ray ray, Light light, float3 orig, float3 wi)
{
    //intersect the light mesh triangle
    float bvhHit = ray.tmax;
    int meshHitTriangleIndex;  //wood triangle addr
    float lightPdf = 0;
    DistributionDiscript discript = DistributionDiscripts[light.distributionDiscriptIndex];
    int distributionIndex = discript.start;
    //getting the mesh of the light
    MeshInstance meshInstance = MeshInstances[light.meshInstanceID];

    //convert to mesh local space
    Ray rayTemp = TransformRay(meshInstance.worldToLocal, ray);
    
    //check the ray intersecting the light mesh
    if (IntersectMeshBVHP(rayTemp, meshInstance.GetBVHOffset(), bvhHit, meshHitTriangleIndex))
    {
        int triAddr = meshHitTriangleIndex;
        int vIndex0 = WoodTriangleIndices[triAddr];
        int vIndex1 = WoodTriangleIndices[triAddr + 1];
        int vIndex2 = WoodTriangleIndices[triAddr + 2];
        float3 p0 = Vertices[vIndex0].position.xyz;
        float3 p1 = Vertices[vIndex1].position.xyz;
        float3 p2 = Vertices[vIndex2].position.xyz;

        p0 = mul(meshInstance.localToWorld, float4(p0, 1.0));
        p1 = mul(meshInstance.localToWorld, float4(p1, 1.0));
        p2 = mul(meshInstance.localToWorld, float4(p2, 1.0));

        lightPdf = 1.0 / length(cross(p0 - p1, p0 - p2));

        distributionIndex += vIndex0 / 3;

        lightPdf *= DiscretePdf(distributionIndex, Distributions1D);
    }

    return lightPdf;
}


float3 EstimateDirect(ShadowRay shadowRay, Interaction isect, inout RNG rng)
{
    float3 Ld = shadowRay.radiance;
    Material material = materials[isect.materialID];
    float3 woLocal = isect.WorldToLocal(isect.wo);
    float3 wi;
    float scatteringPdf = 0;
    float3 wiLocal;
    float2 u = Get2D(rng);
    float3 f = SampleMaterialBRDF(material, isect.uv.xy, woLocal, wiLocal, scatteringPdf, rng);
    
    wi = isect.LocalToWorld(wiLocal);
    f *= abs(dot(wi, isect.normal));

    if (scatteringPdf > 0)
    {
        Light light = lights[asint(shadowRay.lightIndex)];

        Ray ray = SpawnRay(isect.p.xyz, wi, isect.normal, FLT_MAX);

        float lightPdf = AreaLightPdf(ray, light, isect.p, wi);
        if (lightPdf > 0)
        {
            //caculate the mis weight
            float weight = PowerHeuristic(1, lightPdf, 1, scatteringPdf);
            Ld += f * light.radiance * weight / scatteringPdf;
        }
    }

    return Ld;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //if (id.x >= rasterSize.x || id.y >= rasterSize.y)
    //    return;

    uint threadId = id.x + id.y * rasterSize.x;
    uint queueSize = _RayQueueSizeBuffer[queueSizeIndex];
    if (threadId >= queueSize)
        return;
    uint workIndex = _RayQueue[threadId];
    RNG rng = GetRNG(threadId);

    ShadowRay shadowRay = ShadowRays[workIndex];
    Interaction isect = Intersections[workIndex];


    PathRadiance pathRadiance = pathRadiances[workIndex];
    //float2 u = Get2D(rng);//rs.Get2D(workIndex);

    float3 Li = EstimateDirect(shadowRay, isect, rng);

    Li /= shadowRay.lightSourcePdf;

    pathRadiance.li += Li * pathRadiance.beta;
    pathRadiances[workIndex] = pathRadiance;
    //outputTexture[id.xy] = half4(pathRadiance.li * 5, 1);


    WriteRNG(threadId, rng);
}
