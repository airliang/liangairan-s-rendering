// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

cbuffer CB
{
    float3 _CamPosition;
    float4x4 _MATRIX_VP;
    int _InstancesNum;
    Texture2D<float4> _HiZMap;
    SamplerState sampler_HiZMap; // "sampler" + “_HiZMap”
};

struct InstanceNode
{
    float3 boundMin;
    float3 boundMax;
};

StructuredBuffer<InstanceNode> _InstanceNodeBuffer;
StructuredBuffer<matrix> _ObjectToWorldBuffer;
StructuredBuffer<matrix> _WorldToObjectBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
AppendStructuredBuffer<uint> _VisibleBuffer;
//AppendStructuredBuffer<matrix> _TransformBuffer;
//AppendStructuredBuffer<matrix> _InverseTransformBuffer;
//RWStructuredBuffer<uint> _IsVisibleBuffer;

uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w
        || clipPos.x < -clipPos.w
        || clipPos.x > clipPos.w
        || clipPos.y < -clipPos.w
        || clipPos.y > clipPos.w)
        ? 0 : 1;
}

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    uint index = id.x;
    InstanceNode instance = _InstanceNodeBuffer[index];
    float4 boxCorners[8];
    float3 minPos = instance.boundMin;
    float3 maxPos = instance.boundMax;

    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    //because the boxCorners are in worldspace
    float4 clipPos = mul(_MATRIX_VP, boxCorners[0]);
    uint isInFrustum = IsVisibleAfterFrustumCulling(clipPos);

    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;

    //float minDistanceToCamera = distance(instance.boundsCenter.xyz, _CamPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_MATRIX_VP, boxCorners[i]);

        // For Frustum
        isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));

        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);

        // For LODing
        //minDistanceToCamera = min(distance(boxCorners[i].xyz, _CamPosition.xyz), minDistanceToCamera);
    }

    uint isVisible = 1;
    isVisible *= isInFrustum;

    //_IsVisibleBuffer[index] = isVisible;
    if (isVisible > 0)
    {
        //_TransformBuffer.Append(_ObjectToWorldBuffer[index]);
        //_InverseTransformBuffer.Append(_WorldToObjectBuffer[index]);
        //InterlockedAdd(_ArgsBuffer[1], isVisible);
        _VisibleBuffer.Append(index);
    }
    
}
