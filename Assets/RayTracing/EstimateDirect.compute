// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "sampler.hlsl"
#include "bxdf.hlsl"
#include "bvhaccel.hlsl"

cbuffer cb
{
    int    bounces;
    int    lightsNum;
    float2 rasterSize;
};

StructuredBuffer<Interaction>  Intersections;
StructuredBuffer<ShadowRay>  ShadowRays;
StructuredBuffer<Light> lights;
StructuredBuffer<Material> materials;
StructuredBuffer<PathRadiance> pathRadiances;
RWTexture2D<half4> outputTexture;

float AreaLightPdf(Light light, float3 orig, float3 wi)
{
    //intersect the light mesh triangle
    Ray ray;
    ray.orig = float4(orig, FLT_MAX);
    ray.direction = float4(wi, 0);

    MeshInstance meshInstance = MeshInstances[light.meshInstanceID];

    //convert to mesh local space
    Ray rayTemp = TransformRay(meshInstance.worldToLocal, ray);
    float bvhHit = ray.orig.w;
    int meshHitTriangleIndex;  //wood triangle addr
    float pdf = 0;
    int distributionIndex = lightsNum;
    if (IntersectMeshBVHP(rayTemp, meshInstance.GetBVHOffset(), bvhHit, meshHitTriangleIndex))
    {
        int triAddr = meshHitTriangleIndex;
        int vertexIndex0 = WoodTriangleIndices[triAddr];
        int vertexIndex1 = WoodTriangleIndices[triAddr + 1];
        int vertexIndex2 = WoodTriangleIndices[triAddr + 2];
        float4 v0 = Vertices[vertexIndex0].position;
        float4 v1 = Vertices[vertexIndex1].position;
        float4 v2 = Vertices[vertexIndex2].position;

        v0 = mul(meshInstance.localToWorld, float4(v0.xyz, 1.0));
        v1 = mul(meshInstance.localToWorld, float4(v1.xyz, 1.0));
        v2 = mul(meshInstance.localToWorld, float4(v2.xyz, 1.0));

        pdf = 1.0 / length(cross(v0 - v1, v0 - v2));

        distributionIndex += vertexIndex0 / 3;

        pdf *= DiscretePdf(distributionIndex);
    }

    return pdf;
}


float3 EstimateDirect(ShadowRay shadowRay, Interaction isect, float2 u)
{
    float3 Ld = shadowRay.radiance;
    Material material = materials[isect.materialID];
    float3 woLocal = isect.WorldToLocal(isect.wo);
    float3 wi;
    float scatteringPdf = 0;
    float3 wiLocal;
    float3 f = SampleLambert(material, woLocal, wiLocal, u, scatteringPdf);
    
    wi = isect.LocalToWorld(wiLocal);
    f *= abs(dot(wi, isect.normal));

    if (scatteringPdf > 0)
    {
        Light light = lights[asint(shadowRay.lightIndex)];
        float lightPdf = AreaLightPdf(light, isect.p, wi);
        if (lightPdf > 0)
        {
            //caculate the mis weight
            float weight = PowerHeuristic(1, lightPdf, 1, scatteringPdf);

            Ld += f * light.radiance * weight / scatteringPdf;
        }
    }
    

    return Ld;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    if (id.x >= rasterSize.x || id.y >= rasterSize.y)
        return;

    uint threadId = id.x + id.y * rasterSize.x;
    ShadowRay shadowRay = ShadowRays[threadId];
    Interaction isect = Intersections[threadId];
    PathRadiance pathRadiance = pathRadiances[threadId];
    float2 u = rs.Get2D(threadId);
    float3 Li = EstimateDirect(shadowRay, isect, u);

    Li /= shadowRay.lightSourcePdf;
    
    pathRadiance.li += Li * pathRadiance.beta;
    //pathRadiances[threadId] = pathRadiance;
}
